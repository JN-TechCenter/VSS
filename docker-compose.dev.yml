version: '3.8'

# VSS 开发环境 Docker Compose 配置
# 所有配置项从环境变量读取，无硬编码值

services:
  # 后端开发服务
  backend-dev:
    build:
      context: ./VSS-backend
      dockerfile: Dockerfile.dev
    container_name: ${APP_NAME:-vss}-backend-dev
    ports:
      - "${BACKEND_PORT:-3003}:${BACKEND_PORT:-3003}"
    environment:
      # 基础环境
      - NODE_ENV=${NODE_ENV:-development}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SERVER_PORT=${BACKEND_PORT:-3003}
      
      # 数据库配置
      - DB_TYPE=${DB_TYPE:-h2}
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5433}
      - DB_NAME=${DB_NAME:-vss_dev_db}
      - DB_USERNAME=${DB_USERNAME:-dev_user}
      - DB_PASSWORD=${DB_PASSWORD:-dev_password}
      - H2_CONSOLE_ENABLED=${H2_CONSOLE_ENABLED:-true}
      
      # API 配置
      - API_PREFIX=${API_PREFIX:-/api/v1}
      - API_TIMEOUT=${API_TIMEOUT:-60000}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-1000}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - LOG_ROOT_LEVEL=${LOG_ROOT_LEVEL:-info}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-true}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      
    volumes:
      - ./VSS-backend:/app
      - backend-dev-data:/app/data
      - backend-dev-logs:/app/logs
      - /app/target  # 防止容器内编译文件被覆盖
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3003}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端开发服务
  frontend-dev:
    build:
      context: ./VSS-frontend
      dockerfile: Dockerfile.dev
    container_name: ${APP_NAME:-vss}-frontend-dev
    ports:
      - "${FRONTEND_PORT:-3001}:${FRONTEND_PORT:-3001}"
    environment:
      # 基础环境
      - NODE_ENV=${NODE_ENV:-development}
      
      # 前端配置
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3003/api/v1}
      - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Dev Platform}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0-dev}
      - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Development Environment}
      
      # 开发工具配置
      - CHOKIDAR_USEPOLLING=true  # Docker中热重载支持
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=${FRONTEND_PORT:-3001}
      
    volumes:
      - ./VSS-frontend:/app
      - frontend-dev-modules:/app/node_modules
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_PORT:-3001}"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend-dev

  # 邮件测试服务 (Mailhog)
  mailhog-dev:
    image: mailhog/mailhog:latest
    container_name: ${APP_NAME:-vss}-mailhog-dev
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"   # SMTP端口
      - "${MAILHOG_WEB_PORT:-8025}:8025"    # Web界面端口
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库管理工具 (Adminer) - 可选
  adminer-dev:
    image: adminer:latest
    container_name: ${APP_NAME:-vss}-adminer-dev
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=${DB_HOST:-localhost}
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    profiles:
      - tools  # 使用 profile 控制可选服务

# 数据卷
volumes:
  backend-dev-data:
    name: ${APP_NAME:-vss}-backend-dev-data
  backend-dev-logs:
    name: ${APP_NAME:-vss}-backend-dev-logs
  frontend-dev-modules:
    name: ${APP_NAME:-vss}-frontend-dev-modules

# 网络
networks:
  vss-dev-network:
    name: ${DOCKER_NETWORK:-vss-dev-network}
    driver: bridge
      - backend-dev

  # 开发数据库（使用PostgreSQL）
  dev-database:
    image: postgres:15-alpine
    container_name: vss-dev-database
    environment:
      POSTGRES_DB: ${DB_NAME:-vss_dev_db}
      POSTGRES_USER: ${DB_USERNAME:-dev_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${DB_PORT:-5433}:5432"
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-dev_user} -d ${DB_NAME:-vss_dev_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 开发用Redis
  dev-redis:
    image: redis:7-alpine
    container_name: vss-dev-redis
    ports:
      - "6380:6379"
    volumes:
      - dev_redis_data:/data
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]

  # 邮件开发服务器（MailHog）
  mailhog:
    image: mailhog/mailhog:latest
    container_name: vss-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ${DOCKER_NETWORK:-vss-dev-network}
    restart: unless-stopped
    profiles:
      - with-mail
