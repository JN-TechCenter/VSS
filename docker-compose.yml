version: '3.8'

# VSS 微服务 Docker Compose 配置
# 完整的三服务架构：前端 + 后端 + AI推理服务

services:
  # 🎨 前端服务 (React + TypeScript)
  # 仓库: https://github.com/JN-TechCenter/VSS-frontend
  frontend:
    build:
      context: ./VSS-frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3002/api/v1}
        - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Vision Platform}
        - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
        - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Vision Platform}
    container_name: vss-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:${NGINX_PORT:-80}"
    environment:
      # Nginx 配置
      - NGINX_PORT=${NGINX_PORT:-80}
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
      
      # API 配置
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3002/api/v1}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:3002}
      
      # 应用配置
      - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Vision Platform}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
      - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Vision Platform}
      
      # 生产环境特性
      - VITE_BUILD_MODE=${VITE_BUILD_MODE:-production}
      - NGINX_GZIP=${NGINX_GZIP:-on}
      - NGINX_CACHE=${NGINX_CACHE:-on}
      
    volumes:
      - frontend-logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NGINX_PORT:-80}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ⚙️ 后端服务 (Spring Boot + Java)
  # 仓库: https://github.com/JN-TechCenter/VSS-backend
  backend:
    build:
      context: ./VSS-backend
      dockerfile: Dockerfile
    container_name: vss-backend
    ports:
      - "${BACKEND_PORT:-3002}:${BACKEND_PORT:-3002}"
    environment:
      # 基础环境
      - NODE_ENV=${NODE_ENV:-production}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - SERVER_PORT=${BACKEND_PORT:-3002}
      
      # 数据库配置
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-vss_production_db}
      - DB_USERNAME=${DB_USERNAME:-prod_user}
      - DB_PASSWORD=${DB_PASSWORD:-prod_password}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-50}
      - DB_CONNECTION_TIMEOUT=${DB_CONNECTION_TIMEOUT:-10000}
      
      # API 配置
      - API_PREFIX=${API_PREFIX:-/api/v1}
      - API_TIMEOUT=${API_TIMEOUT:-15000}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-50}
      
      # AI服务配置
      - YOLO_SERVICE_URL=${YOLO_SERVICE_URL:-http://yolo-inference:8084}
      - YOLO_SERVICE_TIMEOUT=${YOLO_SERVICE_TIMEOUT:-30000}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - LOG_ROOT_LEVEL=${LOG_ROOT_LEVEL:-error}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-false}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      
      # 生产环境特性
      - PROD_OPTIMIZE=${PROD_OPTIMIZE:-true}
      - PROD_GZIP=${PROD_GZIP:-true}
      
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    depends_on:
      - yolo-inference
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3002}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🤖 AI推理服务 (Python + FastAPI)
  # 仓库: https://github.com/JN-TechCenter/inference_server
  yolo-inference:
    build:
      context: ./inference-server
      dockerfile: Dockerfile
    container_name: vss-yolo-inference
    ports:
      - "${YOLO_PORT:-8084}:${YOLO_PORT:-8084}"
    environment:
      # 服务基础配置
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - HOST=${YOLO_HOST:-0.0.0.0}
      - PORT=${YOLO_PORT:-8084}
      
      # YOLO 模型配置
      - MODEL_TYPE=${MODEL_TYPE:-yolov8}
      - MODEL_SIZE=${MODEL_SIZE:-n}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.5}
      - IOU_THRESHOLD=${IOU_THRESHOLD:-0.45}
      
      # 推理配置
      - DEVICE=${DEVICE:-cpu}
      - BATCH_SIZE=${BATCH_SIZE:-1}
      - MAX_DET=${MAX_DET:-1000}
      - IMG_SIZE=${IMG_SIZE:-640}
      
      # 缓存和优化
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - CACHE_SIZE=${CACHE_SIZE:-100}
      - OPTIMIZE_MODEL=${OPTIMIZE_MODEL:-false}
      
      # 日志配置
      - LOG_LEVEL=${YOLO_LOG_LEVEL:-INFO}
      - LOG_FILE=${YOLO_LOG_FILE:-/app/logs/yolo_inference.log}
      
      # 生产优化
      - WORKERS=${YOLO_WORKERS:-4}
      - WORKER_CONNECTIONS=${YOLO_WORKER_CONNECTIONS:-1000}
      - KEEPALIVE=${YOLO_KEEPALIVE:-2}
      
    volumes:
      - yolo-cache:/app/cache
      - yolo-logs:/app/logs
      - yolo-models:/app/weights  # 模型权重目录
    networks:
      - vss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${YOLO_PORT:-8084}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🌐 网络框架服务 (.NET Framework)
  # 仓库: https://github.com/JN-TechCenter/net-framework-server
  net-framework-server:
    build:
      context: ./net-framework-server
      dockerfile: Dockerfile
    container_name: vss-net-framework-server
    ports:
      - "${NET_PORT:-8085}:${NET_PORT:-8085}"
    environment:
      # 服务基础配置
      - ASPNET_ENVIRONMENT=${ASPNET_ENVIRONMENT:-Production}
      - PORT=${NET_PORT:-8085}
      
      # 网络配置
      - NETWORK_TIMEOUT=${NETWORK_TIMEOUT:-30000}
      - MAX_CONNECTIONS=${NET_MAX_CONNECTIONS:-100}
      
      # 日志配置
      - LOG_LEVEL=${NET_LOG_LEVEL:-Information}
      - LOG_FILE=${NET_LOG_FILE:-C:/app/logs/net_framework.log}
      
    volumes:
      - net-logs:/app/logs
      - net-data:/app/data
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NET_PORT:-8085}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

# 网络配置
networks:
  vss-network:
    driver: bridge
    name: ${DOCKER_NETWORK:-vss-network}

# 数据卷配置
volumes:
  frontend-logs:
    name: vss-frontend-logs
  backend-data:
    name: vss-backend-data
  backend-logs:
    name: vss-backend-logs
  yolo-cache:
    name: vss-yolo-cache
  yolo-logs:
    name: vss-yolo-logs
  yolo-models:
    name: vss-yolo-models
  net-logs:
    name: vss-net-logs
  net-data:
    name: vss-net-data
