# VSS 微服务 Docker Compose 配置
# 完整的三服务架构：前端 + 后端 + AI推理服务

# 触发器配置
#================================================================================================
services:
  # 🌐 Nginx 代理服务 - 统一入口点 (端口 80)
  nginx:
    image: nginx:alpine
    container_name: vss-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - frontend-logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 🎨 前端服务 (React + TypeScript)
  # 仓库: https://github.com/JN-TechCenter/VSS-frontend
  frontend:
    build:
      context: ./VSS-frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3002/api/v1}
        - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Vision Platform}
        - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
        - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Vision Platform}
    container_name: vss-frontend
    # 不直接暴露端口，通过nginx代理访问
    expose:
      - "80"
    environment:
      # Nginx 配置
      - NGINX_PORT=${NGINX_PORT:-80}
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
      
      # API 配置
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:3002/api/v1}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:3002}
      
      # 应用配置
      - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Vision Platform}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
      - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Vision Platform}
      
      # 生产环境特性
      - VITE_BUILD_MODE=${VITE_BUILD_MODE:-production}
      - NGINX_GZIP=${NGINX_GZIP:-on}
      - NGINX_CACHE=${NGINX_CACHE:-on}
      
    volumes:
      - frontend-logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_started
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NGINX_PORT:-80}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ⚙️ 后端服务 (Spring Boot + Java)
  # 仓库: https://github.com/JN-TechCenter/VSS-backend
  backend:
    build:
      context: ./VSS-backend
      dockerfile: Dockerfile
    container_name: vss-backend
    # 不直接暴露端口，通过nginx代理访问
    expose:
      - "3002"
    environment:
      # 基础环境
      - NODE_ENV=${NODE_ENV:-production}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - SERVER_PORT=${BACKEND_PORT:-3002}
      
      # 数据库配置
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vss_production_db}
      - DB_USERNAME=vss_app_user
      - DB_PASSWORD=vss_app_password
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-50}
      - DB_CONNECTION_TIMEOUT=${DB_CONNECTION_TIMEOUT:-10000}
      
      # Redis 缓存配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - REDIS_DB=${REDIS_DB:-0}
      
      # API 配置
      - API_PREFIX=${API_PREFIX:-/api/v1}
      - API_TIMEOUT=${API_TIMEOUT:-15000}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-50}
      
      # AI服务配置
      - YOLO_SERVICE_URL=${YOLO_SERVICE_URL:-http://yolo-inference:8084}
      - YOLO_SERVICE_TIMEOUT=${YOLO_SERVICE_TIMEOUT:-30000}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - LOG_ROOT_LEVEL=${LOG_ROOT_LEVEL:-error}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-false}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost,http://localhost:80,http://localhost:3000}
      
      # 生产环境特性
      - PROD_OPTIMIZE=${PROD_OPTIMIZE:-true}
      - PROD_GZIP=${PROD_GZIP:-true}
      
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      yolo-inference:
        condition: service_started
    networks:
      - vss-network
    restart: unless-stopped
    # 暂时禁用健康检查进行调试
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3002}/actuator/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s

  # 🤖 AI推理服务 (Python + FastAPI)
  # 仓库: https://github.com/JN-TechCenter/inference_server
  yolo-inference:
    build:
      context: ./inference-server
      dockerfile: docker/Dockerfile
    container_name: vss-yolo-inference
    ports:
      - "${YOLO_PORT:-8084}:${YOLO_PORT:-8084}"
    environment:
      # 服务基础配置
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - HOST=${YOLO_HOST:-0.0.0.0}
      - PORT=${YOLO_PORT:-8084}
      
      # YOLO 模型配置
      - MODEL_TYPE=${MODEL_TYPE:-yolov8}
      - MODEL_SIZE=${MODEL_SIZE:-n}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.5}
      - IOU_THRESHOLD=${IOU_THRESHOLD:-0.45}
      
      # 推理配置
      - DEVICE=${DEVICE:-cpu}
      - BATCH_SIZE=${BATCH_SIZE:-1}
      - MAX_DET=${MAX_DET:-1000}
      - IMG_SIZE=${IMG_SIZE:-640}
      
      # 缓存和优化
      - ENABLE_CACHE=${ENABLE_CACHE:-true}
      - CACHE_SIZE=${CACHE_SIZE:-100}
      - OPTIMIZE_MODEL=${OPTIMIZE_MODEL:-false}
      
      # 日志配置
      - LOG_LEVEL=${YOLO_LOG_LEVEL:-INFO}
      - LOG_FILE=${YOLO_LOG_FILE:-/app/logs/yolo_inference.log}
      
      # 生产优化
      - WORKERS=${YOLO_WORKERS:-4}
      - WORKER_CONNECTIONS=${YOLO_WORKER_CONNECTIONS:-1000}
      - KEEPALIVE=${YOLO_KEEPALIVE:-2}
      
    volumes:
      - yolo-cache:/app/cache
      - yolo-logs:/app/logs
      - yolo-models:/app/weights  # 模型权重目录
    networks:
      - vss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${YOLO_PORT:-8084}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🌐 网络框架服务 (.NET Framework)
  # 仓库: https://github.com/JN-TechCenter/net-framework-server
  net-framework-server:
    build:
      context: ./net-framework-server
      dockerfile: Dockerfile
    container_name: vss-net-framework-server
    ports:
      - "${NET_PORT:-8085}:${NET_PORT:-8085}"
    environment:
      # 服务基础配置
      - ASPNET_ENVIRONMENT=${ASPNET_ENVIRONMENT:-Production}
      - PORT=${NET_PORT:-8085}
      
      # 网络配置
      - NETWORK_TIMEOUT=${NETWORK_TIMEOUT:-30000}
      - MAX_CONNECTIONS=${NET_MAX_CONNECTIONS:-100}
      
      # 日志配置
      - LOG_LEVEL=${NET_LOG_LEVEL:-Information}
      - LOG_FILE=${NET_LOG_FILE:-C:/app/logs/net_framework.log}
      
    volumes:
      - net-logs:/app/logs
      - net-data:/app/data
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NET_PORT:-8085}/health", "||", "exit", "0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # 🗄️ PostgreSQL 数据库服务
  database:
    image: postgres:15
    container_name: vss-database
    environment:
      # PostgreSQL 配置
      - POSTGRES_DB=${DB_NAME:-vss_production_db}
      - POSTGRES_USER=${DB_USERNAME:-prod_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-prod_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      
      # 性能优化
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-100}
      
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      # 持久化数据存储
      - postgres-data:/var/lib/postgresql/data
      - postgres-logs:/var/log/postgresql
      # 初始化脚本
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - vss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-prod_user} -d ${DB_NAME:-vss_production_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # 📝 Redis 缓存服务  
  redis:
    image: redis:latest
    container_name: vss-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
    volumes:
      # 持久化缓存数据
      - redis-data:/data
    networks:
      - vss-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 📊 数据分析服务 (Python + Pandas)
  # 仓库: https://github.com/JN-TechCenter/data-analysis-server
  data-analysis-server:
    build:
      context: ./data-analysis-server
      dockerfile: Dockerfile
    container_name: vss-data-analysis-server
    ports:
      - "${DATA_ANALYSIS_PORT:-8086}:${DATA_ANALYSIS_PORT:-8086}"
    environment:
      # 服务基础配置
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - HOST=${DATA_ANALYSIS_HOST:-0.0.0.0}
      - PORT=${DATA_ANALYSIS_PORT:-8086}
      
      # 数据库配置
      - DATABASE_URL=postgresql://${DB_USERNAME:-prod_user}:${DB_PASSWORD:-prod_password}@database:5432/${DB_NAME:-vss_production_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      
      # 数据分析配置
      - ANALYSIS_BATCH_SIZE=${ANALYSIS_BATCH_SIZE:-1000}
      - CACHE_TIMEOUT=${CACHE_TIMEOUT:-3600}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      
      # 日志配置
      - LOG_LEVEL=${DATA_ANALYSIS_LOG_LEVEL:-INFO}
      - LOG_FILE=${DATA_ANALYSIS_LOG_FILE:-/app/logs/data_analysis.log}
      
    volumes:
      - data-analysis-cache:/app/cache
      - data-analysis-logs:/app/logs
      - data-analysis-reports:/app/reports
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:${DATA_ANALYSIS_PORT:-8086}/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 🔧 脚本编排服务 (Python + FastAPI)
  # 仓库: https://github.com/JN-TechCenter/script-orchestration-server
  script-orchestration-server:
    build:
      context: ./script-orchestration-server
      dockerfile: Dockerfile
    container_name: vss-script-orchestration-server
    ports:
      - "${SCRIPT_ORCHESTRATION_PORT:-8087}:${SCRIPT_ORCHESTRATION_PORT:-8087}"
    environment:
      # 服务基础配置
      - FLASK_ENV=${FLASK_ENV:-production}
      - FLASK_DEBUG=${FLASK_DEBUG:-False}
      - HOST=${SCRIPT_ORCHESTRATION_HOST:-0.0.0.0}
      - PORT=${SCRIPT_ORCHESTRATION_PORT:-8087}
      
      # 数据库配置
      - DATABASE_URL=postgresql://${DB_USERNAME:-prod_user}:${DB_PASSWORD:-prod_password}@database:5432/${DB_NAME:-vss_production_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      
      # 脚本执行配置
      - SCRIPT_TIMEOUT=${SCRIPT_TIMEOUT:-300}
      - MAX_CONCURRENT_SCRIPTS=${MAX_CONCURRENT_SCRIPTS:-10}
      - SCRIPT_STORAGE_PATH=/app/scripts
      
      # 外部服务配置
      - BACKEND_SERVICE_URL=http://backend:3002
      - AI_SERVICE_URL=http://yolo-inference:8084
      - DATA_ANALYSIS_SERVICE_URL=http://data-analysis-server:8086
      
      # JWT配置
      - JWT_SECRET=${JWT_SECRET:-script_orchestration_secret}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=1440
      
      # 日志配置
      - LOG_LEVEL=${SCRIPT_ORCHESTRATION_LOG_LEVEL:-INFO}
      - LOG_FILE=${SCRIPT_ORCHESTRATION_LOG_FILE:-/app/logs/script_orchestration.log}
      
    volumes:
      - script-orchestration-scripts:/app/scripts
      - script-orchestration-logs:/app/logs
      - script-orchestration-data:/app/data
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - vss-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:${SCRIPT_ORCHESTRATION_PORT:-8087}/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# 网络配置
#================================================================================================
networks:
  vss-network:
    driver: bridge
    name: ${DOCKER_NETWORK:-vss-network}

# 数据卷配置
#================================================================================================
volumes:
  # 前端相关
  frontend-logs:
    name: vss-frontend-logs
    
  # 后端相关
  backend-data:
    name: vss-backend-data
  backend-logs:
    name: vss-backend-logs
    
  # YOLO推理服务相关
  yolo-cache:
    name: vss-yolo-cache
  yolo-logs:
    name: vss-yolo-logs
  yolo-models:
    name: vss-yolo-models
    
  # .NET框架服务相关
  net-logs:
    name: vss-net-logs
  net-data:
    name: vss-net-data
    
  # 数据分析服务相关
  data-analysis-cache:
    name: vss-data-analysis-cache
  data-analysis-logs:
    name: vss-data-analysis-logs
  data-analysis-reports:
    name: vss-data-analysis-reports
    
  # 脚本编排服务相关
  script-orchestration-scripts:
    name: vss-script-orchestration-scripts
  script-orchestration-logs:
    name: vss-script-orchestration-logs
  script-orchestration-data:
    name: vss-script-orchestration-data
    
  # PostgreSQL 数据库持久化存储
  postgres-data:
    name: vss-postgres-data
    driver: local
  postgres-logs:
    name: vss-postgres-logs
    
  # Redis 缓存持久化存储
  redis-data:
    name: vss-redis-data
    driver: local
