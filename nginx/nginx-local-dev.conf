# VSS Nginx 本地开发环境配置
# 适用于本地直接运行的服务，无需Docker

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # 日志配置
    access_log logs/access.log;
    error_log logs/error.log;
    
    sendfile on;
    keepalive_timeout 65;

    # 上游服务器定义 - 本地服务
    upstream vss_frontend {
        server 127.0.0.1:3001;
        keepalive 32;
    }
    
    upstream vss_backend {
        server 127.0.0.1:3002;
        keepalive 32;
    }
    
    upstream vss_ai_inference {
        server 127.0.0.1:8000;
        keepalive 32;
    }

    # 主服务器配置 - 统一入口点 (端口 80)
    server {
        listen 80;
        server_name localhost;
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        
        # 前端应用代理 - 根路径
        location / {
            proxy_pass http://vss_frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支持单页应用路由
            proxy_intercept_errors on;
            error_page 404 = @fallback;
        }
        
        # 单页应用回退
        location @fallback {
            proxy_pass http://vss_frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "nginx proxy healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API 接口代理 - /api 路径
        location /api/ {
            proxy_pass http://vss_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 超时配置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # AI推理服务代理 - /ai 路径
        location /ai/ {
            proxy_pass http://vss_ai_inference/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时配置 (AI推理可能需要更长时间)
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
        
        # WebSocket 连接
        location /ws {
            proxy_pass http://vss_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 特殊配置
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # H2 数据库控制台代理（开发环境）
        location /h2-console {
            proxy_pass http://vss_backend/h2-console;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # 禁止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # WebSocket 连接升级映射
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
}