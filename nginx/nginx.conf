# VSS Nginx 配置 - 统一代理所有服务，解决端口冲突

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # 上游服务器定义
    upstream vss_frontend {
        server frontend:80;
        keepalive 32;
    }
    
    upstream vss_backend {
        server backend:3002;
        keepalive 32;
    }

    # 速率限制
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # 主服务器配置 - 统一入口点 (端口 80)
    server {
        listen 80;
        server_name localhost vss.local _;
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # 前端应用代理 - 根路径
    location / {
        proxy_pass http://vss_frontend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 支持单页应用路由
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }
    
    # 静态资源缓存
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://vss_frontend;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # 单页应用回退
    location @fallback {
        proxy_pass http://vss_frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 健康检查端点
    location /health {
        access_log off;
        return 200 "nginx proxy healthy\n";
        add_header Content-Type text/plain;
    }
    
    # API 接口代理 - /api 路径
    location /api/ {
        # 速率限制
        limit_req zone=api burst=20 nodelay;
        
        # 保持/api前缀，转发到后端
        proxy_pass http://vss_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 支持
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # 超时配置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 缓存控制
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # 认证相关接口 - 更严格的速率限制
    location /api/auth/ {
        limit_req zone=auth burst=10 nodelay;
        
        proxy_pass http://vss_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 安全配置
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # WebSocket 连接
    location /ws {
        proxy_pass http://vss_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket 特殊配置
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
    
    # 静态资源优化
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://vss_frontend;
        proxy_set_header Host $host;
        
        # 长期缓存
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
    }
    
    # H2 数据库控制台代理（开发环境）
    location /h2-console {
        proxy_pass http://vss_backend/h2-console;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    # 禁止访问隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# WebSocket 连接升级映射
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# 开发工具服务器 - 端口 8080 (开发环境专用)
server {
    listen 8080;
    server_name localhost;
    
    # 注释掉不存在的服务
    # # 邮件测试工具 (Mailhog)
    # location /mail/ {
    #     proxy_pass http://mailhog:8025/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }
    # 
    # # 数据库管理工具 (Adminer)
    # location /db/ {
    #     proxy_pass http://adminer:8080/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }
    
    # 开发工具首页
    location / {
        return 200 '
<!DOCTYPE html>
<html>
<head>
    <title>VSS 开发工具</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }
        .tool { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; background: #fafafa; }
        .tool h3 { margin-top: 0; color: #333; }
        .tool a { color: #007bff; text-decoration: none; font-weight: bold; }
        .tool a:hover { text-decoration: underline; }
        .status { color: #28a745; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>VSS 开发工具面板</h1>
        <p>欢迎使用 VSS Vision Platform 开发工具集合</p>
        
        <div class="tool">
            <h3>🎨 前端应用</h3>
            <p><a href="/" target="_blank">VSS Frontend - 主应用界面</a></p>
            <p class="status">通过 nginx 反向代理到端口 3000</p>
        </div>
        
        <div class="tool">
            <h3>🔧 API 服务</h3>
            <p><a href="/api/health" target="_blank">Backend API - 健康检查</a></p>
            <p class="status">通过 nginx 反向代理到端口 3002</p>
        </div>
        
        <div class="tool">
            <h3>📧 邮件测试工具</h3>
            <p><a href="/mail/" target="_blank">Mailhog - 测试邮件发送</a></p>
            <p class="status">开发环境邮件捕获工具</p>
        </div>
        
        <div class="tool">
            <h3>🗄️ 数据库管理</h3>
            <p><a href="/db/" target="_blank">Adminer - 数据库管理工具</a></p>
            <p class="status">Web 数据库管理界面</p>
        </div>
        
        <div class="tool">
            <h3>💾 H2 控制台</h3>
            <p><a href="/h2-console/" target="_blank">H2 Database Console</a></p>
            <p class="status">开发环境内存数据库管理</p>
        </div>
        
        <div class="tool">
            <h3>📊 系统状态</h3>
            <p><a href="/health" target="_blank">系统健康检查</a></p>
            <p class="status">nginx 代理状态监控</p>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}
