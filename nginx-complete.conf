# VSS Nginx 完整配置 - 解决端口冲突的反向代理方案

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 事件配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP 配置
http {
    # 基础配置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip 压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # WebSocket 连接升级映射
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
    
    # 上游服务器定义
    upstream vss_backend {
        server backend:3002;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    upstream vss_frontend {
        server frontend:3000;
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # 速率限制
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # 主服务器配置 - 统一入口点 (端口 80)
    server {
        listen 80;
        server_name localhost vss.local _;
        
        # 连接限制
        limit_conn addr 10;
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header X-Forwarded-By "VSS-Nginx-Proxy" always;
        
        # 前端应用代理 - 根路径
        location / {
            proxy_pass http://vss_frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 缓存控制
            proxy_cache_bypass $http_upgrade;
        }
        
        # API 接口代理 - /api 路径
        location /api/ {
            # 速率限制
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://vss_backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # 缓存控制
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            
            # CORS 支持
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        }
        
        # WebSocket 连接
        location /ws {
            proxy_pass http://vss_backend/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 特殊配置
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            proxy_connect_timeout 60s;
        }
        
        # 静态资源优化
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
            proxy_pass http://vss_frontend;
            proxy_set_header Host $host;
            
            # 长期缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # 健康检查端点
        location /health {
            access_log off;
            return 200 "VSS Platform is healthy\n";
            add_header Content-Type text/plain;
        }
    }
    
    # 开发工具服务器 - 端口 8080
    server {
        listen 8080;
        server_name localhost;
        
        # 开发工具首页
        location / {
            return 200 '<!DOCTYPE html>
<html><head><title>VSS 开发工具</title></head>
<body><h1>VSS 开发工具面板</h1>
<p><a href="http://localhost">前端应用</a></p>
<p><a href="http://localhost/api/actuator/health">API 健康检查</a></p>
</body></html>';
            add_header Content-Type "text/html; charset=utf-8";
        }
    }
}
