version: '3.8'

# VSS 反向代理解决方案 - 使用 nginx 统一管理所有服务端口
# 解决端口冲突问题，所有服务通过 nginx 统一代理

services:
  # Nginx 反向代理 - 统一入口点
  nginx:
    image: nginx:alpine
    container_name: vss-nginx
    ports:
      # 主要服务端口 - 唯一对外暴露的端口
      - "${NGINX_PORT:-80}:80"
      # 开发工具端口 (可选)
      - "${DEV_TOOLS_PORT:-8080}:8080"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d

  # 后端服务 - 不对外暴露端口
  backend:
    build:
      context: ./VSS-backend
      dockerfile: Dockerfile
    container_name: vss-backend
    # 移除 ports 配置，只在内网通信
    expose:
      - "${BACKEND_PORT:-3002}"
    environment:
      # 基础环境
      - NODE_ENV=${NODE_ENV:-production}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-prod}
      - SERVER_PORT=${BACKEND_PORT:-3002}
      
      # 数据库配置
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=${DB_HOST:-database}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-vss_production_db}
      - DB_USERNAME=${DB_USERNAME:-prod_user}
      - DB_PASSWORD=${DB_PASSWORD:-prod_password}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-50}
      - DB_CONNECTION_TIMEOUT=${DB_CONNECTION_TIMEOUT:-10000}
      
      # API 配置
      - API_PREFIX=${API_PREFIX:-/api/v1}
      - API_TIMEOUT=${API_TIMEOUT:-15000}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-50}
      
      # 日志配置
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - LOG_ROOT_LEVEL=${LOG_ROOT_LEVEL:-error}
      - LOG_FILE_ENABLED=${LOG_FILE_ENABLED:-true}
      - LOG_CONSOLE_ENABLED=${LOG_CONSOLE_ENABLED:-false}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      
      # 生产环境特性
      - PROD_OPTIMIZE=${PROD_OPTIMIZE:-true}
      - PROD_GZIP=${PROD_GZIP:-true}
      
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3002}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 前端服务 - 不对外暴露端口
  frontend:
    build:
      context: ./VSS-frontend
      dockerfile: Dockerfile
      args:
        # 使用相对路径，通过 nginx 反向代理
        - VITE_API_BASE_URL=/api
        - VITE_WS_URL=/ws
        - VITE_APP_TITLE=${VITE_APP_TITLE:-VSS Vision Platform}
        - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
        - VITE_APP_DESCRIPTION=${VITE_APP_DESCRIPTION:-VSS Vision Platform}
    container_name: vss-frontend
    # 移除 ports 配置，只在内网通信
    expose:
      - "${FRONTEND_INTERNAL_PORT:-3000}"
    environment:
      # 前端内部端口
      - PORT=${FRONTEND_INTERNAL_PORT:-3000}
      
      # API 配置 - 使用相对路径
      - VITE_API_BASE_URL=/api
      - VITE_WS_URL=/ws
      
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${FRONTEND_INTERNAL_PORT:-3000}"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - backend

  # 生产数据库 (可选，取决于 DB_TYPE)
  database:
    image: postgres:${POSTGRES_VERSION:-15}-alpine
    container_name: vss-database
    # 不对外暴露端口，只允许内网访问
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-vss_production_db}
      - POSTGRES_USER=${DB_USERNAME:-prod_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-prod_password}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./VSS-backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-prod_user} -d ${DB_NAME:-vss_production_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - database  # 使用 profile 控制是否启动数据库

  # Redis 缓存 (可选)
  redis:
    image: redis:${REDIS_VERSION:-7}-alpine
    container_name: vss-redis
    # 不对外暴露端口
    expose:
      - "6379"
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-redis_password}"
    volumes:
      - redis-data:/data
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache  # 使用 profile 控制是否启动缓存

  # 开发工具 - Mailhog (开发环境)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: vss-mailhog
    expose:
      - "8025"  # Web UI
      - "1025"  # SMTP
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    profiles:
      - dev-tools

  # 开发工具 - Adminer (开发环境)
  adminer:
    image: adminer:latest
    container_name: vss-adminer
    expose:
      - "8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
    networks:
      - ${DOCKER_NETWORK:-vss-network}
    restart: unless-stopped
    profiles:
      - dev-tools

# 数据卷
volumes:
  backend-data:
    name: vss-backend-data
  backend-logs:
    name: vss-backend-logs
  postgres-data:
    name: vss-postgres-data
  redis-data:
    name: vss-redis-data
  nginx-logs:
    name: vss-nginx-logs

# 网络
networks:
  vss-network:
    name: vss-network
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}
